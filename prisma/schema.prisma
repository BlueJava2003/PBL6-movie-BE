// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
model Auth {
  id            Int       @id @default(autoincrement())
  email         String    @unique
  password      String
  fullname      String?
  refreshToken  String?
  role          Role      @default(USER)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  bookings      Booking[]
}

enum Role {
  USER
  ADMIN
}

model BackList {
  id                  Int       @id @default(autoincrement())
  oldAccessToken      String    @unique
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
}
model Category_movie {
  id                  Int       @id @default(autoincrement())
  name                String
  desc                String?
  movie               Movie[]
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
}

model Movie{
  id                  Int       @id @default(autoincrement())
  name                String
  desc                String?
  duration            Int?
  releaseDate         DateTime?
  imageId             String?
  category            Category_movie?  @relation(fields: [categoryId], references: [id])
  categoryId          Int?
  director            String?
  actor               String?
  language            String?
  urlTrailer          String?
  schedule            Schedule[]
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
}
model Schedule {
  id                  Int       @id @default(autoincrement())
  date                DateTime
  timeStart           DateTime
  timeEnd             DateTime
  movie               Movie?    @relation(fields: [movieId], references: [id])
  movieId             Int?
  room                Room?     @relation(fields: [roomId], references: [id])
  roomId              Int?
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
  bookings            Booking[]
}
model Room {
  id                  Int       @id @default(autoincrement())
  roomName            String
  schedule            Schedule[]
  capacity            String
  seatStates          SeatState[]
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
}
model SeatState {
  id                  Int       @id @default(autoincrement())
  room                Room      @relation(fields: [roomId],references: [id])
  roomId              Int 
  seat                Seat      @relation(fields: [seatId],references: [id])
  seatId              Int
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
  booking Booking[]
}
model Seat {
  id                  Int       @id @default(autoincrement())
  name                String    @unique
  seatType            SeatType  @relation(fields: [seatTypeId],references: [id])
  seatTypeId          Int
  seatStates          SeatState[]
}
model SeatType {
  id                  Int       @id @default(autoincrement())
  name                String    @unique
  price               Int
  seats               Seat[]
}
model Booking {
  id                  Int       @id @default(autoincrement())
  seatState           SeatState @relation(fields: [seatStateId],references: [id])
  seatStateId         Int
  account             Auth      @relation(fields: [account_id],references: [id])
  account_id          Int
  schedule            Schedule  @relation(fields: [schedule_id],references: [id])
  schedule_id         Int
  state               State
  createdAt           DateTime  @default(now())
}
enum State {
    PENDING
    SUCCESS
}