// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Auth {
  id           Int       @id @default(autoincrement())
  email        String    @unique
  password     String
  fullname     String?
  refreshToken String?
  accessToken  String?
  role         Role      @default(USER)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  bookings     Booking[]
}

enum Role {
  USER
  ADMIN
}

model BackList {
  id             Int      @id @default(autoincrement())
  oldAccessToken String   @unique
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model Category_movie {
  id        Int      @id @default(autoincrement())
  name      String
  desc      String?
  deleteAt  Boolean  @default(false)
  movie     Movie[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Movie {
  id          Int             @id @default(autoincrement())
  name        String
  desc        String?
  duration    Int?
  releaseDate DateTime?
  imageId     String?
  imagePath   String?
  category    Category_movie? @relation(fields: [categoryId], references: [id])
  categoryId  Int?
  director    String?
  actor       String?
  language    String?
  urlTrailer  String?
  deleteAt    Boolean         @default(false)
  schedule    Schedule[]
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
}

model Schedule {
  id        Int       @id @default(autoincrement())
  date      DateTime
  timeStart DateTime
  timeEnd   DateTime
  movie     Movie?    @relation(fields: [movieId], references: [id])
  movieId   Int?
  room      Room?     @relation(fields: [roomId], references: [id])
  roomId    Int?
  deleteAt  Boolean   @default(false)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  bookings  Booking[]
  roomStates RoomState[]
}

model Room {
  id                  Int       @id @default(autoincrement())
  roomName            String    @unique
  schedule            Schedule[]
  capacity            String
  seatStates          RoomState[]
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
}

model RoomState {
  id Int  @id @default(autoincrement())
  schedule Schedule @relation(fields: [scheduleId],references: [id])
  scheduleId Int
  room Room @relation(fields: [roomId],references: [id])
  roomId Int 
  availableSeat Int[]
  unavailableSeat Int[]
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
}
model Seat {
  id         Int         @id @default(autoincrement())
  name       String      @unique
  seatType   SeatType    @relation(fields: [seatTypeId], references: [id])
  seatTypeId Int
}

model SeatType {
  id    Int    @id @default(autoincrement())
  name  String @unique
  price Int
  seats Seat[]
}

model Booking {
  id          Int       @id @default(autoincrement())
  account     Auth      @relation(fields: [account_id], references: [id])
  account_id  Int
  schedule    Schedule  @relation(fields: [schedule_id], references: [id])
  schedule_id Int
  state       State
  totalPrice  Int
  createdAt   DateTime  @default(now())
}

enum State {
  PENDING
  SUCCESS
}
